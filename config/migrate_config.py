#!/usr/bin/env python3
"""
Configuration Migration Script for OP-ETL

This script migrates configuration from the old split format (config.yaml + sources.yaml)
to the new unified format (single config.yaml).

Usage:
    python migrate_config.py [--legacy-dir legacy/] [--output config.yaml]
    
The script will:
1. Read legacy config.yaml and sources.yaml files
2. Combine them into the new unified format
3. Validate the new configuration
4. Save the migrated configuration

Note: This script is provided for reference. The current system already uses
the unified configuration format.
"""

import argparse
import sys
from pathlib import Path
from typing import Dict, Any
import yaml

def load_yaml(file_path: Path) -> Dict[str, Any]:
    """Load YAML file and return contents."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        print(f"‚ùå Error: File not found: {file_path}")
        sys.exit(1)
    except yaml.YAMLError as e:
        print(f"‚ùå Error parsing YAML file {file_path}: {e}")
        sys.exit(1)

def migrate_configuration(legacy_dir: Path, output_file: Path):
    """Migrate from split configuration to unified format."""
    
    print("üöÄ Starting configuration migration...")
    
    # Load legacy files
    legacy_config_path = legacy_dir / "config.yaml"
    legacy_sources_path = legacy_dir / "sources.yaml"
    
    print(f"üìñ Reading legacy config: {legacy_config_path}")
    legacy_config = load_yaml(legacy_config_path)
    
    print(f"üìñ Reading legacy sources: {legacy_sources_path}")
    legacy_sources = load_yaml(legacy_sources_path)
    
    # Create unified configuration
    unified_config = {
        "# OP-ETL Unified Configuration": None,
        "# Migrated from split format on": None,
        "workspace": legacy_config.get("workspace", {}),
        "processing": legacy_config.get("processing", {}),
        "sources": legacy_sources.get("sources", [])
    }
    
    # Remove comment keys (they were just for documentation)
    unified_config = {k: v for k, v in unified_config.items() if not k.startswith("#")}
    
    # Add migration metadata as comment
    header_comment = """# OP-ETL Unified Configuration
# Migrated from legacy split format (config.yaml + sources.yaml)
# Generated by migrate_config.py

"""
    
    print(f"üíæ Writing unified configuration: {output_file}")
    
    # Write with header comment
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(header_comment)
        yaml.dump(unified_config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
    
    # Validate the migration
    print("‚úÖ Validating migrated configuration...")
    
    # Basic validation
    migrated = load_yaml(output_file)
    required_sections = ["workspace", "processing", "sources"]
    
    for section in required_sections:
        if section not in migrated:
            print(f"‚ùå Error: Missing required section '{section}' in migrated config")
            sys.exit(1)
    
    sources_count = len(migrated.get("sources", []))
    print(f"‚úÖ Migration completed successfully!")
    print(f"   üìä Migrated {sources_count} sources")
    print(f"   üìÅ Output: {output_file}")
    print()
    print("Next steps:")
    print("1. Review the migrated configuration file")
    print("2. Test with the new configuration system")
    print("3. Update any scripts to use the unified format")

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="Migrate OP-ETL configuration to unified format")
    parser.add_argument(
        "--legacy-dir", 
        type=Path, 
        default=Path("legacy/"),
        help="Directory containing legacy config.yaml and sources.yaml (default: legacy/)"
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=Path("config_migrated.yaml"),
        help="Output file for migrated configuration (default: config_migrated.yaml)"
    )
    
    args = parser.parse_args()
    
    # Validate inputs
    if not args.legacy_dir.exists():
        print(f"‚ùå Error: Legacy directory not found: {args.legacy_dir}")
        sys.exit(1)
    
    if not (args.legacy_dir / "config.yaml").exists():
        print(f"‚ùå Error: config.yaml not found in legacy directory: {args.legacy_dir}")
        sys.exit(1)
        
    if not (args.legacy_dir / "sources.yaml").exists():
        print(f"‚ùå Error: sources.yaml not found in legacy directory: {args.legacy_dir}")
        sys.exit(1)
    
    # Perform migration
    migrate_configuration(args.legacy_dir, args.output)

if __name__ == "__main__":
    main()